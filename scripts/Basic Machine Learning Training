{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Basic Machine Learning Training","provenance":[],"mount_file_id":"1XdYgcWeAUPhD78hR9qt9OxybmH5AEgon","authorship_tag":"ABX9TyMPMjM+WOko+unxPwlltS4l"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"2Unk19WcwAVs","executionInfo":{"status":"ok","timestamp":1636971796488,"user_tz":-480,"elapsed":525,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["# Importing Libraries\n","import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.pipeline import Pipeline\n","\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer\n","\n","from sklearn.metrics import accuracy_score, confusion_matrix,classification_report, f1_score\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import LinearSVC\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","\n","from joblib import dump, load"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pOdTqi65yN1u","executionInfo":{"status":"ok","timestamp":1636972821659,"user_tz":-480,"elapsed":299,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"ece8ddf6-6487-4d14-e558-a45cb426741d"},"source":["import nltk\n","nltk.download('stopwords')\n","\n","from nltk.stem.snowball import SnowballStemmer\n","stemmer = SnowballStemmer(\"english\", ignore_stopwords=True)\n","\n","class StemmedCountVectorizer(CountVectorizer):\n","    def build_analyzer(self):\n","        analyzer = super(StemmedCountVectorizer, self).build_analyzer()\n","        return lambda doc: ([stemmer.stem(w) for w in analyzer(doc)])\n","\n","stemmed_count_vect = StemmedCountVectorizer(stop_words='english')\n","dump(stemmed_count_vect, 'models/vectorizer.joblib')"],"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["['models/vectorizer.joblib']"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7UUe2tS-G7rD","executionInfo":{"status":"ok","timestamp":1636971797140,"user_tz":-480,"elapsed":324,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"670b3005-b9f5-4bf6-f32a-c580d13866c8"},"source":["%cd '/content/drive/MyDrive/Final Year Project/'\n","%ls"],"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Final Year Project\n"," \u001b[0m\u001b[01;34mdata\u001b[0m/   \u001b[01;34mmodels\u001b[0m/  'Proposal Draft.gdoc'   Resources.gdoc   \u001b[01;34mscripts\u001b[0m/\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":926},"id":"AgBD1vqQTpax","executionInfo":{"status":"ok","timestamp":1636971797141,"user_tz":-480,"elapsed":6,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"32ef6255-af87-48ae-b5b6-504e50a94c28"},"source":["# Load Data\n","import pandas as pd\n","pd.set_option('display.max_colwidth', None)\n","\n","data = pd.read_csv('data/memotion_dataset_7k/labels.csv')\n","data = data.set_index('image_name', drop=False)\n","\n","url_regex = '(https?:\\/\\/)?([\\dA-Za-z\\.-]+)\\.([A-Za-z\\.]{2,6})([\\/\\w \\.-]*)'\n","data['text_cleaned'] = data['text_corrected'].str.replace(url_regex, '', regex=True)\n","\n","data.head()"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>image_name</th>\n","      <th>text_ocr</th>\n","      <th>text_corrected</th>\n","      <th>humour</th>\n","      <th>sarcasm</th>\n","      <th>offensive</th>\n","      <th>motivational</th>\n","      <th>overall_sentiment</th>\n","      <th>text_cleaned</th>\n","    </tr>\n","    <tr>\n","      <th>image_name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>image_1.jpg</th>\n","      <td>0</td>\n","      <td>image_1.jpg</td>\n","      <td>LOOK THERE MY FRIEND LIGHTYEAR NOW ALL SOHALIKUT TREND PLAY THE 10 YEARS CHALLENGE AT FACEBOOK imgflip.com</td>\n","      <td>LOOK THERE MY FRIEND LIGHTYEAR NOW ALL SOHALIKUT TREND PLAY THE 10 YEARS CHALLENGE AT FACEBOOK imgflip.com</td>\n","      <td>hilarious</td>\n","      <td>general</td>\n","      <td>not_offensive</td>\n","      <td>not_motivational</td>\n","      <td>very_positive</td>\n","      <td>LOOK THERE MY FRIEND LIGHTYEAR NOW ALL SOHALIKUT TREND PLAY THE 10 YEARS CHALLENGE AT FACEBOOK</td>\n","    </tr>\n","    <tr>\n","      <th>image_2.jpeg</th>\n","      <td>1</td>\n","      <td>image_2.jpeg</td>\n","      <td>The best of #10 YearChallenge! Completed in less the 4 years. Kudus to @narendramodi ji 8:05 PM - 16 Jan 2019 from Mumbai</td>\n","      <td>The best of #10 YearChallenge! Completed in less the 4 years. Kudus to @narendramodi ji 8:05 PM - 16 Jan 2019 from Mumbai  India</td>\n","      <td>not_funny</td>\n","      <td>general</td>\n","      <td>not_offensive</td>\n","      <td>motivational</td>\n","      <td>very_positive</td>\n","      <td>The best of #10 YearChallenge! Completed in less the 4 years. Kudus to @narendramodi ji 8:05 PM - 16 Jan 2019 from Mumbai  India</td>\n","    </tr>\n","    <tr>\n","      <th>image_3.JPG</th>\n","      <td>2</td>\n","      <td>image_3.JPG</td>\n","      <td>Sam Thorne @Strippin ( Follow Follow Saw everyone posting these 2009 vs 2019 pics so here's mine 6:23 PM - 12 Jan 2019 O 636 Retweets 3</td>\n","      <td>Sam Thorne @Strippin ( Follow Follow Saw everyone posting these 2009 vs 2019 pics so here's mine 6:23 PM - 12 Jan 2019 O 636 Retweets 3 224 LIKES 65 636 3.2K</td>\n","      <td>very_funny</td>\n","      <td>not_sarcastic</td>\n","      <td>not_offensive</td>\n","      <td>not_motivational</td>\n","      <td>positive</td>\n","      <td>Sam Thorne @Strippin ( Follow Follow Saw everyone posting these 2009 vs 2019 pics so here's mine 6:23 PM - 12 Jan 2019 O 636 Retweets 3 224 LIKES 65 636 3.2K</td>\n","    </tr>\n","    <tr>\n","      <th>image_4.png</th>\n","      <td>3</td>\n","      <td>image_4.png</td>\n","      <td>10 Year Challenge - Sweet Dee Edition</td>\n","      <td>10 Year Challenge - Sweet Dee Edition</td>\n","      <td>very_funny</td>\n","      <td>twisted_meaning</td>\n","      <td>very_offensive</td>\n","      <td>motivational</td>\n","      <td>positive</td>\n","      <td>10 Year Challenge - Sweet Dee Edition</td>\n","    </tr>\n","    <tr>\n","      <th>image_5.png</th>\n","      <td>4</td>\n","      <td>image_5.png</td>\n","      <td>10 YEAR CHALLENGE WITH NO FILTER 47 Hilarious 10 Year Challenge Memes | What is #10 Year Challenge?</td>\n","      <td>10 YEAR CHALLENGE WITH NO FILTER 47 Hilarious 10 Year Challenge Memes | What is #10 Year Challenge?</td>\n","      <td>hilarious</td>\n","      <td>very_twisted</td>\n","      <td>very_offensive</td>\n","      <td>not_motivational</td>\n","      <td>neutral</td>\n","      <td>10 YEAR CHALLENGE WITH NO FILTER 47 Hilarious 10 Year Challenge Memes | What is #10 Year Challenge?</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Unnamed: 0  ...                                                                                                                                                   text_cleaned\n","image_name                ...                                                                                                                                                               \n","image_1.jpg            0  ...                                                                LOOK THERE MY FRIEND LIGHTYEAR NOW ALL SOHALIKUT TREND PLAY THE 10 YEARS CHALLENGE AT FACEBOOK \n","image_2.jpeg           1  ...                               The best of #10 YearChallenge! Completed in less the 4 years. Kudus to @narendramodi ji 8:05 PM - 16 Jan 2019 from Mumbai  India\n","image_3.JPG            2  ...  Sam Thorne @Strippin ( Follow Follow Saw everyone posting these 2009 vs 2019 pics so here's mine 6:23 PM - 12 Jan 2019 O 636 Retweets 3 224 LIKES 65 636 3.2K\n","image_4.png            3  ...                                                                                                                          10 Year Challenge - Sweet Dee Edition\n","image_5.png            4  ...                                                            10 YEAR CHALLENGE WITH NO FILTER 47 Hilarious 10 Year Challenge Memes | What is #10 Year Challenge?\n","\n","[5 rows x 10 columns]"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"WFpsEbBT0EkT","executionInfo":{"status":"ok","timestamp":1636971805826,"user_tz":-480,"elapsed":8689,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["anno = pd.read_csv('data/memotion_dataset_7k/annotations/annotations.csv')\n","anno.columns = ['index', 'image', 'labels']\n","del anno['index']\n","anno = anno.drop_duplicates().sort_values('image', ignore_index=True)\n","anno.labels = anno.labels.apply(eval)\n","anno = anno.groupby('image').sum()"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"DmQoyIXq0Fde","executionInfo":{"status":"ok","timestamp":1636971806538,"user_tz":-480,"elapsed":721,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["all_labels = set()\n","for labels in anno.labels:\n","    labels = set() if type(labels) != set else labels\n","    all_labels.update(labels)\n","all_labels -= {None}\n","\n","meme = set()\n","for label in all_labels:\n","    if 'meme' in label.lower():\n","        meme.add(label)\n","\n","EXCLUDED_KEYWORDS = meme\n","EXCLUDED_KEYWORDS.update({'Image', 'Imgur', None, 'Humour', 'Text','Stock photography'})\n","\n","anno.labels = anno.labels.apply(lambda x: x - EXCLUDED_KEYWORDS if type(x) == set else set())"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"YhlgvILr0HLl","executionInfo":{"status":"ok","timestamp":1636971806539,"user_tz":-480,"elapsed":6,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["data = data.join(anno)"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"id":"hKOkSIkj0JH2","executionInfo":{"status":"ok","timestamp":1636971806539,"user_tz":-480,"elapsed":5,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["data['text_cleaned_info'] = data.text_cleaned + data.labels.apply(lambda x: '. '.join(x))"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"id":"H1etO1tjVoaJ","executionInfo":{"status":"ok","timestamp":1636971806540,"user_tz":-480,"elapsed":6,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["vect = TfidfTransformer()\n","pipe_svc        = Pipeline([('stem', stemmed_count_vect), ('vect', vect), ('model', LinearSVC(class_weight='balanced'))])\n","pipe_logistic   = Pipeline([('stem', stemmed_count_vect), ('vect', vect), ('model', LogisticRegression(class_weight='balanced'))])\n","pipe_nb         = Pipeline([('stem', stemmed_count_vect), ('vect', vect), ('model', MultinomialNB())])\n","pipe_tree       = Pipeline([('stem', stemmed_count_vect), ('vect', vect), ('model', DecisionTreeClassifier(random_state=3244, class_weight='balanced'))])\n","pipe_forest     = Pipeline([('stem', stemmed_count_vect), ('vect', vect), ('model', RandomForestClassifier(n_estimators=250, max_features='log2', random_state=0, n_jobs=-1, class_weight='balanced'))])\n","pipe_xgb        = Pipeline([('stem', stemmed_count_vect), ('vect', vect), ('model', XGBClassifier(class_weight='balanced'))])"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"1vC3ssXzwJeO","executionInfo":{"status":"ok","timestamp":1636971806540,"user_tz":-480,"elapsed":6,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["def check_accuracy(model_name, y_true, y_pred):\n","    print(\"Accuracy of \" + model_name + \": {}%\".format(round(accuracy_score(y_true, y_pred)*100,2)))\n","    print(\"\\nConfusion Matrix of \" + model_name + \":\\n\")\n","    print(confusion_matrix(y_true, y_pred))\n","    print(\"\\nClassification Report of \" + model_name + \":\\n\")\n","    print(classification_report(y_true, y_pred))\n","    print(\"F1 Macro Score: \" + str(f1_score(y_true, y_pred, average='macro')))\n","\n","#row True col predicted"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"OizhrNRywci5","executionInfo":{"status":"ok","timestamp":1636971806540,"user_tz":-480,"elapsed":5,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["train_texts, train_labels = data.text_cleaned.astype(str).to_list(), data.overall_sentiment.astype(str).to_list()\n","\n","train_labels = [2 if 'positive' in x else 1 if 'negative' in x else 0 for x in train_labels]"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"KxvQOkChwXIH","executionInfo":{"status":"ok","timestamp":1636971806541,"user_tz":-480,"elapsed":6,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["X_train, X_val, y_train, y_val = train_test_split(train_texts, train_labels, test_size=.2)"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MEFpaWPITmgU","executionInfo":{"status":"ok","timestamp":1636971811083,"user_tz":-480,"elapsed":4548,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"bd11412e-a48d-4a0a-fb35-b337e49e36a7"},"source":["model_name = \"XGB Classifier\"\n","\n","model_xgb = pipe_xgb.fit(X_train, y_train)\n","dump(model_xgb, 'models/xgb.joblib')\n","xgb_pred = model_xgb.predict(X_val)\n","\n","check_accuracy(model_name, y_val, xgb_pred)"],"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of XGB Classifier: 60.11%\n","\n","Confusion Matrix of XGB Classifier:\n","\n","[[  6   0 436]\n"," [  2   0 106]\n"," [ 14   0 835]]\n","\n","Classification Report of XGB Classifier:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.27      0.01      0.03       442\n","           1       0.00      0.00      0.00       108\n","           2       0.61      0.98      0.75       849\n","\n","    accuracy                           0.60      1399\n","   macro avg       0.29      0.33      0.26      1399\n","weighted avg       0.45      0.60      0.46      1399\n","\n","F1 Macro Score: 0.25869556237155455\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0maoLJw5xVhm","executionInfo":{"status":"ok","timestamp":1636971813589,"user_tz":-480,"elapsed":2516,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"fc1ce8bb-a5ed-4154-a6fd-a38e49ff95ae"},"source":["model_name = \"Logistic Regression\"\n","\n","model_log = pipe_logistic.fit(X_train, y_train)\n","dump(model_log, 'models/lr.joblib')\n","log_pred = model_log.predict(X_val)\n","\n","check_accuracy(model_name, y_val, log_pred)"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Logistic Regression: 41.39%\n","\n","Confusion Matrix of Logistic Regression:\n","\n","[[153  80 209]\n"," [ 36  16  56]\n"," [290 149 410]]\n","\n","Classification Report of Logistic Regression:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.32      0.35      0.33       442\n","           1       0.07      0.15      0.09       108\n","           2       0.61      0.48      0.54       849\n","\n","    accuracy                           0.41      1399\n","   macro avg       0.33      0.33      0.32      1399\n","weighted avg       0.47      0.41      0.44      1399\n","\n","F1 Macro Score: 0.32031895261968796\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hrrr5MRsxcBF","executionInfo":{"status":"ok","timestamp":1636971814837,"user_tz":-480,"elapsed":1252,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"39df353a-fdea-451e-e94d-2e6941b94e9d"},"source":["model_name = \"Linear SVC\"\n","\n","model_svc = pipe_svc.fit(X_train, y_train)\n","dump(model_svc, 'models/svc.joblib')\n","svc_pred = model_svc.predict(X_val)\n","\n","check_accuracy(model_name, y_val, svc_pred)"],"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Linear SVC: 45.82%\n","\n","Confusion Matrix of Linear SVC:\n","\n","[[124  41 277]\n"," [ 32  10  66]\n"," [246  96 507]]\n","\n","Classification Report of Linear SVC:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.31      0.28      0.29       442\n","           1       0.07      0.09      0.08       108\n","           2       0.60      0.60      0.60       849\n","\n","    accuracy                           0.46      1399\n","   macro avg       0.32      0.32      0.32      1399\n","weighted avg       0.46      0.46      0.46      1399\n","\n","F1 Macro Score: 0.32303063163604784\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Px56wFetxf6S","executionInfo":{"status":"ok","timestamp":1636971816210,"user_tz":-480,"elapsed":1374,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"b1f2377d-4257-4399-b0c8-642b8086f134"},"source":["model_name = \"Multinomial Naive Bayes\"\n","\n","model_nb = pipe_nb.fit(X_train, y_train)\n","dump(model_nb, 'models/mnb.joblib')\n","nb_pred = model_nb.predict(X_val)\n","\n","check_accuracy(model_name, y_val, nb_pred)"],"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Multinomial Naive Bayes: 60.33%\n","\n","Confusion Matrix of Multinomial Naive Bayes:\n","\n","[[  7   0 435]\n"," [  0   0 108]\n"," [ 12   0 837]]\n","\n","Classification Report of Multinomial Naive Bayes:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.37      0.02      0.03       442\n","           1       0.00      0.00      0.00       108\n","           2       0.61      0.99      0.75       849\n","\n","    accuracy                           0.60      1399\n","   macro avg       0.32      0.33      0.26      1399\n","weighted avg       0.48      0.60      0.47      1399\n","\n","F1 Macro Score: 0.26045939494087506\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mp7Sz2AExtvT","executionInfo":{"status":"ok","timestamp":1636971819260,"user_tz":-480,"elapsed":3053,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"535ff978-6581-494e-eeaf-0311e700c6ce"},"source":["model_name = \"Decision Tree Classifier\"\n","\n","model_tree = pipe_tree.fit(X_train, y_train)\n","dump(model_tree, 'models/dt.joblib')\n","\n","tree_pred = model_tree.predict(X_val)\n","\n","check_accuracy(model_name, y_val, tree_pred)"],"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Decision Tree Classifier: 41.03%\n","\n","Confusion Matrix of Decision Tree Classifier:\n","\n","[[131  76 235]\n"," [ 34  16  58]\n"," [255 167 427]]\n","\n","Classification Report of Decision Tree Classifier:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.31      0.30      0.30       442\n","           1       0.06      0.15      0.09       108\n","           2       0.59      0.50      0.54       849\n","\n","    accuracy                           0.41      1399\n","   macro avg       0.32      0.32      0.31      1399\n","weighted avg       0.46      0.41      0.43      1399\n","\n","F1 Macro Score: 0.31181116859996266\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bRFmTysFxz81","executionInfo":{"status":"ok","timestamp":1636971835657,"user_tz":-480,"elapsed":16404,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"c0ee021c-d80b-43af-fe35-170fac08e331"},"source":["model_name = \"Random Forest Classifier\"\n","\n","model_forest = pipe_forest.fit(X_train, y_train)\n","dump(model_forest, 'models/rf.joblib')\n","\n","forest_pred = model_forest.predict(X_val)\n","\n","check_accuracy(model_name, y_val, forest_pred)"],"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Random Forest Classifier: 55.11%\n","\n","Confusion Matrix of Random Forest Classifier:\n","\n","[[ 48  12 382]\n"," [ 12   2  94]\n"," [100  28 721]]\n","\n","Classification Report of Random Forest Classifier:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.30      0.11      0.16       442\n","           1       0.05      0.02      0.03       108\n","           2       0.60      0.85      0.70       849\n","\n","    accuracy                           0.55      1399\n","   macro avg       0.32      0.33      0.30      1399\n","weighted avg       0.46      0.55      0.48      1399\n","\n","F1 Macro Score: 0.29697497967565484\n"]}]},{"cell_type":"code","metadata":{"id":"IALxOQtb0kza","executionInfo":{"status":"ok","timestamp":1636971835658,"user_tz":-480,"elapsed":7,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["train_texts, train_labels = data.text_cleaned_info.astype(str).to_list(), data.overall_sentiment.astype(str).to_list()\n","\n","train_labels = [2 if 'positive' in x else 1 if 'negative' in x else 0 for x in train_labels]"],"execution_count":54,"outputs":[]},{"cell_type":"code","metadata":{"id":"DTF78sLexxyX","executionInfo":{"status":"ok","timestamp":1636971835660,"user_tz":-480,"elapsed":7,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["X_train, X_val, y_train, y_val, image_train, image_val = train_test_split(train_texts, train_labels, data.image_name, test_size=.2)"],"execution_count":55,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pMFhjtZ51c4E","executionInfo":{"status":"ok","timestamp":1636971846070,"user_tz":-480,"elapsed":10416,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"c3fcd98f-8f2a-401c-c6cc-aa7f9765ce5b"},"source":["model_name = \"XGB Classifier\"\n","\n","model_xgb = pipe_xgb.fit(X_train, y_train)\n","dump(model_xgb, 'models/xgb_vision.joblib')\n","\n","xgb_pred = model_xgb.predict(X_val)\n","\n","check_accuracy(model_name, y_val, xgb_pred)"],"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of XGB Classifier: 60.97%\n","\n","Confusion Matrix of XGB Classifier:\n","\n","[[  5   0 423]\n"," [  1   0 112]\n"," [ 10   0 848]]\n","\n","Classification Report of XGB Classifier:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.31      0.01      0.02       428\n","           1       0.00      0.00      0.00       113\n","           2       0.61      0.99      0.76       858\n","\n","    accuracy                           0.61      1399\n","   macro avg       0.31      0.33      0.26      1399\n","weighted avg       0.47      0.61      0.47      1399\n","\n","F1 Macro Score: 0.25977584009712523\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GbV0E3nQ1eVt","executionInfo":{"status":"ok","timestamp":1636971850283,"user_tz":-480,"elapsed":4222,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"56b1ecbc-4732-4fab-c6a6-cbfd790aa02a"},"source":["model_name = \"Logistic Regression\"\n","\n","model_log = pipe_logistic.fit(X_train, y_train)\n","dump(model_log, 'models/lr_vision.joblib')\n","\n","log_pred = model_log.predict(X_val)\n","\n","check_accuracy(model_name, y_val, log_pred)"],"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Logistic Regression: 43.1%\n","\n","Confusion Matrix of Logistic Regression:\n","\n","[[153  58 217]\n"," [ 34  21  58]\n"," [299 130 429]]\n","\n","Classification Report of Logistic Regression:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.31      0.36      0.33       428\n","           1       0.10      0.19      0.13       113\n","           2       0.61      0.50      0.55       858\n","\n","    accuracy                           0.43      1399\n","   macro avg       0.34      0.35      0.34      1399\n","weighted avg       0.48      0.43      0.45      1399\n","\n","F1 Macro Score: 0.3381742265982921\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y3T6sotx1iKK","executionInfo":{"status":"ok","timestamp":1636971852975,"user_tz":-480,"elapsed":2705,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"d6841bf0-2e0d-4bfa-f00b-2d9cf462f955"},"source":["model_name = \"Linear SVC\"\n","\n","model_svc = pipe_svc.fit(X_train, y_train)\n","dump(model_svc, 'models/svc_vision.joblib')\n","\n","\n","svc_pred = model_svc.predict(X_val)\n","\n","check_accuracy(model_name, y_val, svc_pred)"],"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Linear SVC: 49.11%\n","\n","Confusion Matrix of Linear SVC:\n","\n","[[126  28 274]\n"," [ 34   6  73]\n"," [240  63 555]]\n","\n","Classification Report of Linear SVC:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.32      0.29      0.30       428\n","           1       0.06      0.05      0.06       113\n","           2       0.62      0.65      0.63       858\n","\n","    accuracy                           0.49      1399\n","   macro avg       0.33      0.33      0.33      1399\n","weighted avg       0.48      0.49      0.48      1399\n","\n","F1 Macro Score: 0.3307241671372106\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PooTdSyl1in9","executionInfo":{"status":"ok","timestamp":1636971855629,"user_tz":-480,"elapsed":2659,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"af0f6fc4-20df-4505-e0d1-86f24eca8333"},"source":["model_name = \"Multinomial Naive Bayes\"\n","\n","model_nb = pipe_nb.fit(X_train, y_train)\n","dump(model_nb, 'models/mnb_vision.joblib')\n","\n","nb_pred = model_nb.predict(X_val)\n","\n","check_accuracy(model_name, y_val, nb_pred)"],"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Multinomial Naive Bayes: 61.33%\n","\n","Confusion Matrix of Multinomial Naive Bayes:\n","\n","[[  2   0 426]\n"," [  1   0 112]\n"," [  2   0 856]]\n","\n","Classification Report of Multinomial Naive Bayes:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.40      0.00      0.01       428\n","           1       0.00      0.00      0.00       113\n","           2       0.61      1.00      0.76       858\n","\n","    accuracy                           0.61      1399\n","   macro avg       0.34      0.33      0.26      1399\n","weighted avg       0.50      0.61      0.47      1399\n","\n","F1 Macro Score: 0.25648367305359904\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1aoqCYSB1mQn","executionInfo":{"status":"ok","timestamp":1636971861352,"user_tz":-480,"elapsed":5726,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"d3a12664-39f0-493f-d427-b97d10b48691"},"source":["model_name = \"Decision Tree Classifier\"\n","\n","model_tree = pipe_tree.fit(X_train, y_train)\n","dump(model_tree, 'models/dt_vision.joblib')\n","\n","tree_pred = model_tree.predict(X_val)\n","\n","check_accuracy(model_name, y_val, tree_pred)"],"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Decision Tree Classifier: 44.46%\n","\n","Confusion Matrix of Decision Tree Classifier:\n","\n","[[151  60 217]\n"," [ 45  19  49]\n"," [301 105 452]]\n","\n","Classification Report of Decision Tree Classifier:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.30      0.35      0.33       428\n","           1       0.10      0.17      0.13       113\n","           2       0.63      0.53      0.57       858\n","\n","    accuracy                           0.44      1399\n","   macro avg       0.35      0.35      0.34      1399\n","weighted avg       0.49      0.44      0.46      1399\n","\n","F1 Macro Score: 0.3426788917821067\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RGGVLPvx1mwj","executionInfo":{"status":"ok","timestamp":1636971876358,"user_tz":-480,"elapsed":15018,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"9ebc0b8f-38e6-4c40-de2b-d0a1531e3093"},"source":["model_name = \"Random Forest Classifier\"\n","\n","model_forest = pipe_forest.fit(X_train, y_train)\n","dump(model_forest, 'models/rf_vision.joblib')\n","\n","forest_pred = model_forest.predict(X_val)\n","\n","check_accuracy(model_name, y_val, forest_pred)"],"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Random Forest Classifier: 59.61%\n","\n","Confusion Matrix of Random Forest Classifier:\n","\n","[[  7   1 420]\n"," [  3   0 110]\n"," [ 29   2 827]]\n","\n","Classification Report of Random Forest Classifier:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.18      0.02      0.03       428\n","           1       0.00      0.00      0.00       113\n","           2       0.61      0.96      0.75       858\n","\n","    accuracy                           0.60      1399\n","   macro avg       0.26      0.33      0.26      1399\n","weighted avg       0.43      0.60      0.47      1399\n","\n","F1 Macro Score: 0.2589018163420839\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ztCMq5hBTxcb","executionInfo":{"status":"ok","timestamp":1636971879813,"user_tz":-480,"elapsed":3463,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"875646cf-a972-4824-89f4-b916cdc39733"},"source":["model_name = \"Logistic Regression\"\n","\n","model_log = pipe_logistic.fit(X_train, y_train)\n","log_pred = model_log.predict(X_val)\n","\n","check_accuracy(model_name, y_val, log_pred)"],"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of Logistic Regression: 43.1%\n","\n","Confusion Matrix of Logistic Regression:\n","\n","[[153  58 217]\n"," [ 34  21  58]\n"," [299 130 429]]\n","\n","Classification Report of Logistic Regression:\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.31      0.36      0.33       428\n","           1       0.10      0.19      0.13       113\n","           2       0.61      0.50      0.55       858\n","\n","    accuracy                           0.43      1399\n","   macro avg       0.34      0.35      0.34      1399\n","weighted avg       0.48      0.43      0.45      1399\n","\n","F1 Macro Score: 0.3381742265982921\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IpFFq9GlT-3g","executionInfo":{"status":"ok","timestamp":1636971879814,"user_tz":-480,"elapsed":12,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"463a28ce-6e04-420d-83eb-f471f3839a30"},"source":["pd.Series(y_val) != pd.Series(log_pred)"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0        True\n","1        True\n","2        True\n","3        True\n","4       False\n","        ...  \n","1394     True\n","1395     True\n","1396    False\n","1397    False\n","1398    False\n","Length: 1399, dtype: bool"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QqF2VxI5UguO","executionInfo":{"status":"ok","timestamp":1636971879814,"user_tz":-480,"elapsed":11,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}},"outputId":"7a718f34-cf89-4045-8559-15f7c7a8072c"},"source":["pd.Series(image_val)"],"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["image_name\n","image_3015.png    image_3015.png\n","image_3870.jpg    image_3870.jpg\n","image_4537.jpg    image_4537.jpg\n","image_6566.png    image_6566.png\n","image_4720.jpg    image_4720.jpg\n","                       ...      \n","image_2111.jpg    image_2111.jpg\n","image_2161.jpg    image_2161.jpg\n","image_974.jpg      image_974.jpg\n","image_6915.jpg    image_6915.jpg\n","image_3115.png    image_3115.png\n","Name: image_name, Length: 1399, dtype: object"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"HwA_Pa9wTyTE","executionInfo":{"status":"ok","timestamp":1636971879814,"user_tz":-480,"elapsed":8,"user":{"displayName":"Matheus Aaron","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhSSE0c-IqlWABPLSyHSsWbEeikcih2ENKYPWoP=s64","userId":"18385735216906815375"}}},"source":["pd.DataFrame(zip(list(image_val),y_val,log_pred))[pd.Series(y_val) != pd.Series(log_pred)].to_csv('wrongly_classified_images.csv', index=False)"],"execution_count":65,"outputs":[]}]}